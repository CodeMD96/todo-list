{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","list","setList","input","setInput","addHandler","storedList","replace","push","type","value","onChange","event","target","onKeyPress","which","onClick","className","map","item","index","splice","removeHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAmDeA,MA9Cf,WACE,MAAwBC,mBAAS,CAAC,UAAW,YAA7C,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAa,WACjB,IAAIC,EAAU,YAAML,GACpBE,EAAMI,QAAQ,KAAM,KAClBD,EAAWE,KAAKL,GAClBD,EAAQI,IAmBV,OACE,gCACE,4CACA,uBAAOG,KAAK,OAAOC,MAAOP,EAAOQ,SAPf,SAACC,GACrBR,EAASQ,EAAMC,OAAOH,QAMsCI,WAnBtC,SAACF,GACH,KAAhBA,EAAMG,OACRV,OAkBA,wBAAQW,QAASX,EAAjB,yBACA,qBAAKY,UAAU,YAAf,SACGhB,EAAKiB,KAAI,SAACC,EAAMC,GACP,OACE,sBAAiBH,UAAU,YAA3B,UACE,4BAAIE,IACJ,wBAAQF,UAAU,cAAcD,QAAS,kBApBvC,SAACI,GACrB,IAAId,EAAU,YAAOL,GACrBK,EAAWe,OAAOD,EAAO,GACzBlB,EAAQI,GAiByDgB,CAAcF,IAA7D,oBAFQA,YC5BfG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3ebb3251.chunk.js","sourcesContent":["\r\nimport './App.css';\r\n\r\nimport { useState } from \"react\"\r\n\r\nfunction App() {\r\n  const [list, setList] = useState([\"do this\", \"do that\"]);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const addHandler = () => {\r\n    let storedList =[...list];\r\n    input.replace(/ /g, \"\") &&\r\n      storedList.push(input);\r\n    setList(storedList);\r\n  };\r\n\r\n  const keypressHandler = (event) => {\r\n    if (event.which === 13) {\r\n      addHandler(input);\r\n    }\r\n  };\r\n\r\n  const removeHandler = (index) => {\r\n    let storedList = [...list];\r\n    storedList.splice(index, 1);\r\n    setList(storedList);\r\n  }\r\n\r\n  const changeHandler = (event) => {\r\n    setInput(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>To do list</h1>\r\n      <input type=\"text\" value={input} onChange={changeHandler} onKeyPress={keypressHandler} />\r\n      <button onClick={addHandler}>Add to list</button>\r\n      <div className=\"todo-list\">\r\n        {list.map((item, index) => {\r\n                  return (\r\n                    <div key={index} className=\"list-item\">\r\n                      <p>{item}</p>\r\n                      <button className=\"list-button\" onClick={() => removeHandler(index)} >Done</button>\r\n                    </div>\r\n                  )\r\n              })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}